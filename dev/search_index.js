var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api/#Metatheory","page":"API Documentation","title":"Metatheory","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Modules = [Metatheory]","category":"page"},{"location":"api/#Main.Metatheory.Theory","page":"API Documentation","title":"Main.Metatheory.Theory","text":"A Theory is either a vector of Rule or a compiled, callable function.\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.Rule-Tuple{Expr}","page":"API Documentation","title":"Main.Metatheory.Rule","text":"Construct a Rule from a quoted expression. You can also use the [@rule] macro to create a Rule.\n\nSymbolic Rules\n\nRules defined as left_hand => right_hand are called symbolic rules. Application of a symbolic Rule is a replacement of the left_hand pattern with the right_hand substitution, with the correct instantiation of pattern variables. Function call symbols are not treated as pattern variables, all other identifiers are treated as pattern variables. Literals such as 5, :e, \"hello\" are not treated as pattern variables.\n\nDynamic Rules\n\nRules defined as left_hand |> right_hand are called dynamic rules. Dynamic rules behave like anonymous functions. Instead of a symbolic substitution, the right hand of a dynamic |> rule is evaluated during rewriting: matched values are bound to pattern variables as in a regular function call. This allows for dynamic computation of\n\nType Assertions\n\nType assertions are supported in the left hand of rules to match and access literal values both when using classic rewriting and EGraph based rewriting. To use a type assertion pattern, add ::T after a pattern variable in the left_hand of a rule.\n\n\n\nExamples\n\nSymbolic rule\n\nRule(:(a * b => b * a))\n\nEquational rule\n\nRule(:(a * b == b * a))\n\nDynamic rule\n\nRule(:(a::Number * b::Number |> a*b))\n\n\n\nSignatures\n\nRule(e::Expr; mod) -> Main.Metatheory.Rule\n\n\n\n\nMethods\n\nRule(e; mod)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/rule.jl:75.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.compile_theory-Tuple{Array{Main.Metatheory.Rule,1},Module}","page":"API Documentation","title":"Main.Metatheory.compile_theory","text":"Compile a theory to a closure that does the pattern matching job Returns a RuntimeGeneratedFunction, which does not use eval and is as fast as a regular Julia anonymous function ðŸ”¥\n\n\n\nSignatures\n\ncompile_theory(theory::Array{Main.Metatheory.Rule,1}, mod::Module; __source__) -> RuntimeGeneratedFunctions.RuntimeGeneratedFunction{_A,_B,_C,_D} where _D where _C where _B where _A\n\n\n\n\nMethods\n\ncompile_theory(theory, mod; __source__)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/matchcore_compiler.jl:85.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.eval_types_in_assertions-Tuple{Any,Module}","page":"API Documentation","title":"Main.Metatheory.eval_types_in_assertions","text":"When creating a theory, type assertions in the left hand contain symbols. We want to replace the type symbols with the real type values, to fully support the subtyping mechanism during pattern matching.\n\n\n\nSignatures\n\neval_types_in_assertions(x::Any, mod::Module) -> Any\n\n\n\n\nMethods\n\neval_types_in_assertions(x, mod)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/rule.jl:136.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.genrhsfun-Tuple{Any,Any,Module}","page":"API Documentation","title":"Main.Metatheory.genrhsfun","text":"Generates a tuple containing the list of formal parameters (Symbols) and the RuntimeGeneratedFunction corresponding to the right hand side of a :dynamic Rule.\n\n\n\nSignatures\n\ngenrhsfun(left::Any, right::Any, mod::Module) -> Tuple{Array{Symbol,1},RuntimeGeneratedFunctions.RuntimeGeneratedFunction{_A,_B,_C,_D} where _D where _C where _B where _A}\n\n\n\n\nMethods\n\ngenrhsfun(left, right, mod)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/rule.jl:116.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.rewrite-Tuple{Any,Union{Array{Main.Metatheory.Rule,1}, Function}}","page":"API Documentation","title":"Main.Metatheory.rewrite","text":"This function executes a classical rewriting algorithm on a Julia expression ex. Classical rewriting applies rule in order with a fixed point iteration:\n\nThis algorithm heavily relies on RuntimeGeneratedFunctions.jl and the MatchCore pattern matcher. NOTE: this does not involve the use of EGraphs.EGraph or equality saturation (EGraphs.saturate!). When using rewrite, be aware of infinite loops: Since rules are matched in order in every iteration, it is possible that commonly used symbolic rules such as commutativity or associativity of operators may cause this algorithm to have a cycling computation instantly. This algorithm detects cycling computation by keeping an history of hashes, and instantly returns when a cycle is detected.\n\nThis algorithm is suitable for simple, deterministic symbolic rewrites. For more advanced use cases, where it is needed to apply multiple rewrites at the same time, or it is known that rules are causing loops, please use EGraphs.EGraph and equality saturation (EGraphs.saturate!).\n\n\n\nSignatures\n\nrewrite(ex::Any, theory::Union{Array{Main.Metatheory.Rule,1}, Function}; __source__, order, m, timeout) -> Any\n\n\n\n\nMethods\n\nrewrite(ex, theory; __source__, order, m, timeout)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/rewrite.jl:28.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.@compile_theory-Tuple{Any}","page":"API Documentation","title":"Main.Metatheory.@compile_theory","text":"Compile a theory at runtime to a closure that does the pattern matching job\n\n\n\nSignatures\n\n\n\nMethods\n\n\n\n\n\n","category":"macro"},{"location":"api/#Metatheory.EGraphs","page":"API Documentation","title":"Metatheory.EGraphs","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CurrentModule = Metatheory\nDocTestSetup  = quote\n    using Metatheory\nend","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Modules = [Metatheory.EGraphs]","category":"page"},{"location":"api/#Main.Metatheory.EGraphs.AbstractAnalysis","page":"API Documentation","title":"Main.Metatheory.EGraphs.AbstractAnalysis","text":"abstract type AbstractAnalysis\n\nAbstract type representing an EGraph analysis, attaching values from a join semi-lattice domain to an EGraph\n\n\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.EGraph","page":"API Documentation","title":"Main.Metatheory.EGraphs.EGraph","text":"mutable struct EGraph\n\nA concrete type representing an [EGraph]. See the egg paper for implementation details\n\n\n\nFields\n\nU::DataStructures.IntDisjointSets\nstores the equality relations over e-class ids\nM::Dict{Int64,Main.Metatheory.EGraphs.EClassData}\nmap from eclass id to eclasses\nH::Dict{Any,Int64}\ndirty::Array{Int64,1}\nworklist for ammortized upwards merging\nroot::Int64\nanalyses::Array{Main.Metatheory.EGraphs.AbstractAnalysis,1}\nA vector of analyses associated to the EGraph\nsymcache::Dict{Any,Array{Int64,1}}\na cache mapping function symbols to e-classes that contain e-nodes with that function symbol.\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.ExtractionAnalysis","page":"API Documentation","title":"Main.Metatheory.EGraphs.ExtractionAnalysis","text":"struct ExtractionAnalysis <: Main.Metatheory.EGraphs.AbstractAnalysis\n\nAn AbstractAnalysis that computes the cost of expression nodes and chooses the node with the smallest cost for each E-Class.\n\n\n\nFields\n\negraph::Main.Metatheory.EGraphs.EGraph\ncostfun::Function\ndata::Dict{Int64,Tuple{Main.Metatheory.EGraphs.ENode,Number}}\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.merge!-Tuple{Main.Metatheory.EGraphs.EGraph,Int64,Int64}","page":"API Documentation","title":"Base.merge!","text":"Given an EGraph and two e-class ids, set the two e-classes as equal.\n\n\n\nSignatures\n\nmerge!(G::Main.Metatheory.EGraphs.EGraph, a::Int64, b::Int64) -> Int64\n\n\n\n\nMethods\n\nmerge!(G, a, b)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:161.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.add!-Tuple{Main.Metatheory.EGraphs.EGraph,Main.Metatheory.EGraphs.ENode}","page":"API Documentation","title":"Main.Metatheory.EGraphs.add!","text":"Inserts an e-node in an EGraph\n\n\n\nSignatures\n\nadd!(G::Main.Metatheory.EGraphs.EGraph, n::Main.Metatheory.EGraphs.ENode) -> Main.Metatheory.EGraphs.EClass\n\n\n\n\nMethods\n\nadd!(G, n)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:90.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.addanalysis!-Tuple{Main.Metatheory.EGraphs.EGraph,Type{var\"#s4\"} where var\"#s4\"<:Main.Metatheory.EGraphs.AbstractAnalysis,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.EGraphs.addanalysis!","text":"Adds an AbstractAnalysis to an EGraph. An EGraph can only contain one analysis of type AnType.\n\n\n\nSignatures\n\naddanalysis!(g::Main.Metatheory.EGraphs.EGraph, AnType::Type{var\"#s4\"} where var\"#s4\"<:Main.Metatheory.EGraphs.AbstractAnalysis, args::Vararg{Any,N} where N; lazy) -> Any\n\n\n\n\nMethods\n\naddanalysis!(g, AnType, args; lazy)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/analysis.jl:6.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.addexpr!-Tuple{Main.Metatheory.EGraphs.EGraph,Any}","page":"API Documentation","title":"Main.Metatheory.EGraphs.addexpr!","text":"Recursively traverse an Expr and insert terms into an EGraph. If e is not an Expr, then directly insert the literal into the EGraph.\n\n\n\nSignatures\n\naddexpr!(G::Main.Metatheory.EGraphs.EGraph, e::Any) -> Main.Metatheory.EGraphs.EClass\n\n\n\n\nMethods\n\naddexpr!(G, e)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:133.\n\naddexpr!(G, e)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:148.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.analyze!-Tuple{Main.Metatheory.EGraphs.EGraph,Main.Metatheory.EGraphs.AbstractAnalysis,Array{Int64,1}}","page":"API Documentation","title":"Main.Metatheory.EGraphs.analyze!","text":"WARNING. This function is unstable.\n\n\n\nSignatures\n\nanalyze!(g::Main.Metatheory.EGraphs.EGraph, analysis::Main.Metatheory.EGraphs.AbstractAnalysis, ids::Array{Int64,1}) -> Main.Metatheory.EGraphs.AbstractAnalysis\n\n\n\n\nMethods\n\nanalyze!(g, analysis, ids)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/analysis.jl:22.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.astsize-Tuple{Main.Metatheory.EGraphs.ENode,Main.Metatheory.EGraphs.AbstractAnalysis}","page":"API Documentation","title":"Main.Metatheory.EGraphs.astsize","text":"A basic cost function, where the computed cost is the size (number of children) of the current expression.\n\n\n\nSignatures\n\nastsize(n::Main.Metatheory.EGraphs.ENode, an::Main.Metatheory.EGraphs.AbstractAnalysis) -> Any\n\n\n\n\nMethods\n\nastsize(n, an)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/extraction.jl:5.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.astsize_inv-Tuple{Main.Metatheory.EGraphs.ENode,Main.Metatheory.EGraphs.AbstractAnalysis}","page":"API Documentation","title":"Main.Metatheory.EGraphs.astsize_inv","text":"A basic cost function, where the computed cost is the size (number of children) of the current expression, times -1. Strives to get the largest expression\n\n\n\nSignatures\n\nastsize_inv(n::Main.Metatheory.EGraphs.ENode, an::Main.Metatheory.EGraphs.AbstractAnalysis) -> Any\n\n\n\n\nMethods\n\nastsize_inv(n, an)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/extraction.jl:19.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.discard_value-Tuple{NamedTuple}","page":"API Documentation","title":"Main.Metatheory.EGraphs.discard_value","text":"Construct a TimeData from a NamedTuple returned by @timed\n\n\n\nSignatures\n\ndiscard_value(stats::NamedTuple) -> NamedTuple{(:time, :bytes, :gctime),_A} where _A<:Tuple\n\n\n\n\nMethods\n\ndiscard_value(stats)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/saturation_report.jl:19.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.ematchlist-Tuple{Main.Metatheory.EGraphs.EGraph,Array{Any,1},AbstractArray{Int64,1},Base.ImmutableDict{Any,Tuple{Main.Metatheory.EGraphs.EClass,Any}}}","page":"API Documentation","title":"Main.Metatheory.EGraphs.ematchlist","text":"From https://www.hpl.hp.com/techreports/2003/HPL-2003-148.pdf The iterator ematchlist matches a list of terms t to a list of E-nodes by first finding all substitutions that match the first term to the first E-node, and then extending each such substitution in all possible ways that match the remaining terms to the remaining E-nodes. The base case of this recursion is the empty list, which requires no extension to the substitution; the other case relies on Match to find the substitutions that match the first term to the first E-node.\n\n\n\nSignatures\n\nematchlist(e::Main.Metatheory.EGraphs.EGraph, t::Array{Any,1}, v::AbstractArray{Int64,1}, sub::Base.ImmutableDict{Any,Tuple{Main.Metatheory.EGraphs.EClass,Any}}; buf) -> Array{Base.ImmutableDict{Any,Tuple{Main.Metatheory.EGraphs.EClass,Any}},1}\n\n\n\n\nMethods\n\nematchlist(e, t, v, sub; buf)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/ematch.jl:26.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.eqsat_step!-Tuple{Main.Metatheory.EGraphs.EGraph,Array{Main.Metatheory.Rule,1}}","page":"API Documentation","title":"Main.Metatheory.EGraphs.eqsat_step!","text":"Core algorithm of the library: the equality saturation step.\n\n\n\nSignatures\n\neqsat_step!(egraph::Main.Metatheory.EGraphs.EGraph, theory::Array{Main.Metatheory.Rule,1}; scheduler, mod, match_hist, sizeout, stopwhen, matchlimit) -> Tuple{Main.Metatheory.EGraphs.Report,Main.Metatheory.EGraphs.EGraph}\n\n\n\n\nMethods\n\neqsat_step!(egraph, theory; scheduler, mod, match_hist, sizeout, stopwhen, matchlimit)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/saturation.jl:43.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.extract!-Tuple{Main.Metatheory.EGraphs.EGraph,Main.Metatheory.EGraphs.ExtractionAnalysis}","page":"API Documentation","title":"Main.Metatheory.EGraphs.extract!","text":"Given an ExtractionAnalysis, extract the expression with the smallest computed cost from an EGraph\n\n\n\nSignatures\n\nextract!(G::Main.Metatheory.EGraphs.EGraph, extran::Main.Metatheory.EGraphs.ExtractionAnalysis) -> Any\n\n\n\n\nMethods\n\nextract!(G, extran)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/extraction.jl:86.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.find-Tuple{Main.Metatheory.EGraphs.EGraph,Int64}","page":"API Documentation","title":"Main.Metatheory.EGraphs.find","text":"Returns the canonical e-class id for a given e-class.\n\n\n\nSignatures\n\nfind(G::Main.Metatheory.EGraphs.EGraph, a::Int64) -> Int64\n\n\n\n\nMethods\n\nfind(G, a)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:77.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.reachable-Tuple{Main.Metatheory.EGraphs.EGraph,Int64}","page":"API Documentation","title":"Main.Metatheory.EGraphs.reachable","text":"Recursive function that traverses an EGraph and returns a vector of all reachable e-classes from a given e-class id.\n\n\n\nSignatures\n\nreachable(g::Main.Metatheory.EGraphs.EGraph, id::Int64) -> Array{Int64,1}\n\n\n\n\nMethods\n\nreachable(g, id)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:288.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.rebuild!-Tuple{Main.Metatheory.EGraphs.EGraph}","page":"API Documentation","title":"Main.Metatheory.EGraphs.rebuild!","text":"This function restores invariants and executes upwards merging in an EGraph. See the egg paper for more details.\n\n\n\nSignatures\n\nrebuild!(egraph::Main.Metatheory.EGraphs.EGraph) -> Union{Nothing, Int64}\n\n\n\n\nMethods\n\nrebuild!(egraph)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/egg.jl:199.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.saturate!-Tuple{Main.Metatheory.EGraphs.EGraph,Array{Main.Metatheory.Rule,1}}","page":"API Documentation","title":"Main.Metatheory.EGraphs.saturate!","text":"Given an EGraph and a collection of rewrite rules, execute the equality saturation algorithm.\n\n\n\nSignatures\n\nsaturate!(egraph::Main.Metatheory.EGraphs.EGraph, theory::Array{Main.Metatheory.Rule,1}; mod, timeout, stopwhen, sizeout, matchlimit, scheduler) -> Main.Metatheory.EGraphs.Report\n\n\n\n\nMethods\n\nsaturate!(egraph, theory; mod, timeout, stopwhen, sizeout, matchlimit, scheduler)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/saturation.jl:204.\n\n\n\n\n\n","category":"method"},{"location":"api/#Metatheory.EGraphs.Schedulers","page":"API Documentation","title":"Metatheory.EGraphs.Schedulers","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CurrentModule = Metatheory\nDocTestSetup  = quote\n    using Metatheory\nend","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Modules = [Metatheory.EGraphs.Schedulers]","category":"page"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.AbstractScheduler","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.AbstractScheduler","text":"abstract type AbstractScheduler\n\nRepresents a rule scheduler for the equality saturation process\n\n\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.BackoffScheduler","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.BackoffScheduler","text":"struct BackoffScheduler <: Main.Metatheory.EGraphs.Schedulers.AbstractScheduler\n\nA Rewrite Scheduler that implements exponential rule backoff. For each rewrite, there exists a configurable initial match limit. If a rewrite search yield more than this limit, then we ban this rule for number of iterations, double its limit, and double the time it will be banned next time.\n\nThis seems effective at preventing explosive rules like associativity from taking an unfair amount of resources.\n\n\n\nFields\n\ndata::Dict{Main.Metatheory.Rule,Main.Metatheory.EGraphs.Schedulers.BackoffSchedulerEntry}\nG::Main.Metatheory.EGraphs.EGraph\ntheory::Array{Main.Metatheory.Rule,1}\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.ScoredScheduler","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.ScoredScheduler","text":"struct ScoredScheduler <: Main.Metatheory.EGraphs.Schedulers.AbstractScheduler\n\nA Rewrite Scheduler that implements exponential rule backoff. For each rewrite, there exists a configurable initial match limit. If a rewrite search yield more than this limit, then we ban this rule for number of iterations, double its limit, and double the time it will be banned next time.\n\nThis seems effective at preventing explosive rules like associativity from taking an unfair amount of resources.\n\n\n\nFields\n\ndata::Dict{Main.Metatheory.Rule,Main.Metatheory.EGraphs.Schedulers.ScoredSchedulerEntry}\nG::Main.Metatheory.EGraphs.EGraph\ntheory::Array{Main.Metatheory.Rule,1}\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.SimpleScheduler","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.SimpleScheduler","text":"struct SimpleScheduler <: Main.Metatheory.EGraphs.Schedulers.AbstractScheduler\n\nA simple Rewrite Scheduler that applies every rule every time\n\n\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.cansaturate-Tuple{Main.Metatheory.EGraphs.Schedulers.AbstractScheduler}","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.cansaturate","text":"Should return true if the e-graph can be said to be saturated\n\n\n\nSignatures\n\ncansaturate(s::Main.Metatheory.EGraphs.Schedulers.AbstractScheduler) -> Bool\n\n\n\n\nMethods\n\ncansaturate(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/abstractscheduler.jl:12.\n\ncansaturate(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/backoffscheduler.jl:43.\n\ncansaturate(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/scoredscheduler.jl:59.\n\ncansaturate(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/simplescheduler.jl:6.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.readstep!-Tuple{Main.Metatheory.EGraphs.Schedulers.AbstractScheduler}","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.readstep!","text":"This function is called before pattern matching on the e-graph\n\n\n\nSignatures\n\nreadstep!(s::Main.Metatheory.EGraphs.Schedulers.AbstractScheduler)\n\n\n\n\nMethods\n\nreadstep!(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/abstractscheduler.jl:22.\n\nreadstep!(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/backoffscheduler.jl:45.\n\nreadstep!(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/scoredscheduler.jl:61.\n\nreadstep!(s)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/simplescheduler.jl:13.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.shouldskip-Tuple{Main.Metatheory.EGraphs.Schedulers.AbstractScheduler,Main.Metatheory.Rule}","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.shouldskip","text":"Should return true if the rule r should be skipped\n\n\n\nSignatures\n\nshouldskip(s::Main.Metatheory.EGraphs.Schedulers.AbstractScheduler, r::Main.Metatheory.Rule) -> Bool\n\n\n\n\nMethods\n\nshouldskip(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/abstractscheduler.jl:17.\n\nshouldskip(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/backoffscheduler.jl:27.\n\nshouldskip(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/scoredscheduler.jl:28.\n\nshouldskip(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/simplescheduler.jl:7.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.EGraphs.Schedulers.writestep!-Tuple{Main.Metatheory.EGraphs.Schedulers.AbstractScheduler,Main.Metatheory.Rule}","page":"API Documentation","title":"Main.Metatheory.EGraphs.Schedulers.writestep!","text":"This function is called after pattern matching on the e-graph\n\n\n\nSignatures\n\nwritestep!(s::Main.Metatheory.EGraphs.Schedulers.AbstractScheduler, r::Main.Metatheory.Rule) -> Union{Nothing, Int64}\n\n\n\n\nMethods\n\nwritestep!(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/abstractscheduler.jl:27.\n\nwritestep!(s, rule)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/backoffscheduler.jl:61.\n\nwritestep!(s, rule)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/scoredscheduler.jl:77.\n\nwritestep!(s, r)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/EGraphs/Schedulers/simplescheduler.jl:14.\n\n\n\n\n\n","category":"method"},{"location":"api/#Metatheory.Util","page":"API Documentation","title":"Metatheory.Util","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CurrentModule = Metatheory\nDocTestSetup  = quote\n    using Metatheory\nend","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Modules = [Util]","category":"page"},{"location":"api/#Main.Metatheory.Util","page":"API Documentation","title":"Main.Metatheory.Util","text":"Definitions of various utility functions for metaprogramming\n\n\n\nImports\n\nBase\nBase.Meta\nCore\nDocStringExtensions\n\n\n\n\n\n","category":"module"},{"location":"api/#Main.Metatheory.Util.amp-Tuple{Any}","page":"API Documentation","title":"Main.Metatheory.Util.amp","text":"Add a & expression\n\n\n\nSignatures\n\namp(v::Any) -> Expr\n\n\n\n\nMethods\n\namp(v)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/Util.jl:15.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.bf_walk!-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.bf_walk!","text":"Breadth First Walk (Tree Prewalk) on expressions mutates expression in-place.\n\n\n\nSignatures\n\nbf_walk!(f::Any, e::Any, f_args::Vararg{Any,N} where N; skip, skip_call) -> Any\n\n\n\n\nMethods\n\nbf_walk!(f, e, f_args; skip, skip_call)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/walks.jl:45.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.bf_walk-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.bf_walk","text":"Breadth First Walk (Tree Prewalk) on expressions. Does not mutate expressions.\n\n\n\nSignatures\n\nbf_walk(f::Any, e::Any, f_args::Vararg{Any,N} where N; skip, skip_call) -> Any\n\n\n\n\nMethods\n\nbf_walk(f, e, f_args; skip, skip_call)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/walks.jl:65.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.binarize!-Tuple{Any,Symbol}","page":"API Documentation","title":"Main.Metatheory.Util.binarize!","text":"HARD FIX of n-arity of operators in Expr trees\n\n\n\nSignatures\n\nbinarize!(e::Any, op::Symbol) -> Any\n\n\n\n\nMethods\n\nbinarize!(e, op)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/cleaning.jl:11.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.block-Tuple","page":"API Documentation","title":"Main.Metatheory.Util.block","text":"Make a block expression from an array of exprs\n\n\n\nSignatures\n\nblock(vs::Vararg{Any,N} where N) -> Any\n\n\n\n\nMethods\n\nblock(vs)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/Util.jl:13.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.cleanast-Tuple{Any}","page":"API Documentation","title":"Main.Metatheory.Util.cleanast","text":"Binarize n-ary operators (+ and *) and call rmlines\n\n\n\nSignatures\n\ncleanast(ex::Any) -> Any\n\n\n\n\nMethods\n\ncleanast(ex)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/cleaning.jl:37.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.df_walk!-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.df_walk!","text":"Depth First Walk (Tree Postwalk) on expressions, mutates expression in-place.\n\n\n\nSignatures\n\ndf_walk!(f::Any, e::Any, f_args::Vararg{Any,N} where N; skip, skip_call) -> Any\n\n\n\n\nMethods\n\ndf_walk!(f, e, f_args; skip, skip_call)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/walks.jl:4.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.df_walk-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.df_walk","text":"Depth First Walk (Tree Postwalk) on expressions. Does not mutate expressions.\n\n\n\nSignatures\n\ndf_walk(f::Any, e::Any, f_args::Vararg{Any,N} where N; skip, skip_call) -> Any\n\n\n\n\nMethods\n\ndf_walk(f, e, f_args; skip, skip_call)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/walks.jl:22.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.dollar-Tuple{Any}","page":"API Documentation","title":"Main.Metatheory.Util.dollar","text":"Add a dollar expression\n\n\n\nSignatures\n\ndollar(v::Any) -> Expr\n\n\n\n\nMethods\n\ndollar(v)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/Util.jl:11.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.normalize-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.normalize","text":"Iterates a function f on datum until a fixed point is reached where f(x) == x\n\n\n\nSignatures\n\nnormalize(f::Any, datum::Any, fargs::Vararg{Any,N} where N; callback) -> Any\n\n\n\n\nMethods\n\nnormalize(f, datum, fargs; callback)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/fixpoint.jl:4.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.normalize_nocycle-Tuple{Any,Any,Vararg{Any,N} where N}","page":"API Documentation","title":"Main.Metatheory.Util.normalize_nocycle","text":"Like normalize but keeps a vector of hashes to detect cycles, returns the current datum when a cycle is detected\n\n\n\nSignatures\n\nnormalize_nocycle(f::Any, datum::Any, fargs::Vararg{Any,N} where N; callback) -> Any\n\n\n\n\nMethods\n\nnormalize_nocycle(f, datum, fargs; callback)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/fixpoint.jl:20.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.Metatheory.Util.rmlines-Tuple{Expr}","page":"API Documentation","title":"Main.Metatheory.Util.rmlines","text":"Remove LineNumberNode from quoted blocks of code\n\n\n\nSignatures\n\nrmlines(e::Expr) -> Any\n\n\n\n\nMethods\n\nrmlines(e)\n\ndefined at /home/runner/work/Metatheory.jl/Metatheory.jl/src/Util/cleaning.jl:5.\n\n\n\n\n\n","category":"method"},{"location":"theories/#Rules-and-Theories-Syntax","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"","category":"section"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"TODO: table of syntax","category":"page"},{"location":"theories/#The-Metatheory-Library","page":"Rules and Theories Syntax","title":"The Metatheory Library","text":"","category":"section"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"The Metatheory.Library module contains utility functions and macros for creating rules and theories from commonly used algebraic structures and properties.","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"using Metatheory.Library\n\ncomm_monoid = commutative_monoid(:(*), 1)\n# alternatively\ncomm_monoid = @commutative_monoid (*) 1","category":"page"},{"location":"theories/#Theories-are-Collections-and-Composable","page":"Rules and Theories Syntax","title":"Theories are Collections and Composable","text":"","category":"section"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"Theories are just collections, precisely vectors of the Rule object, and can be composed as regular Julia collections. The most useful way of composing theories is unioning them with the 'âˆª' operator. You are not limited to composing theories, you can manipulate and create them at both runtime and compile time as regular vectors.","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"comm_group = @theory begin\n    a + 0 => a\n    a + b => b + a\n    a + inv(a) => 0 # inverse\n    a + (b + c) => (a + b) + c\nend\ndistrib = @theory begin\n    a * (b + c) => (a * b) + (a * c)\nend\nt = comm_monoid âˆª comm_group âˆª distrib","category":"page"},{"location":"theories/#Type-Assertions-and-Dynamic-Rules","page":"Rules and Theories Syntax","title":"Type Assertions and Dynamic Rules","text":"","category":"section"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"You can use type assertions in the left hand of rules to match and access literal values both when using classic rewriting and EGraph based rewriting.","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"You can also use dynamic rules, defined with the |> operator, to dynamically compute values in the right hand of expressions. Dynamic rules, are similar to anonymous functions. Instead of a symbolic substitution, the right hand of a dynamic |> rule is evaluated during rewriting: the values that produced a match are bound to the pattern variables.","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"fold_mul = @theory begin\n    a::Number * b::Number |> a*b\nend\nt = comm_monoid âˆª fold_mul\n@areequal t (3*4) 12","category":"page"},{"location":"theories/#Escaping","page":"Rules and Theories Syntax","title":"Escaping","text":"","category":"section"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"You can escape values in the left hand side of rules using $ just as you would do with the regular quoting/unquoting mechanism.","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"example = @theory begin\n    a + $(3+2) |> :something\nend","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"Becomes","category":"page"},{"location":"theories/","page":"Rules and Theories Syntax","title":"Rules and Theories Syntax","text":"1-element Vector{Rule}:\n Rule(:(a + 5 |> :something))","category":"page"},{"location":"analysis/#EGraph-Analyses-and-Extraction","page":"EGraph Analyses and Extraction","title":"EGraph Analyses and Extraction","text":"","category":"section"},{"location":"analysis/#Extracting-from-an-E-Graph","page":"EGraph Analyses and Extraction","title":"Extracting from an E-Graph","text":"","category":"section"},{"location":"analysis/","page":"EGraph Analyses and Extraction","title":"EGraph Analyses and Extraction","text":"Extraction can be formulated as an EGraph analysis, or after saturation. A cost function can be provided. Metatheory.jl already provides some simple cost functions, such as astsize, which expresses preference for the smallest expressions.","category":"page"},{"location":"analysis/","page":"EGraph Analyses and Extraction","title":"EGraph Analyses and Extraction","text":"G = EGraph(:((log(e) * log(e)) * (log(a^3 * a^2))))\nsaturate!(G, t)\nextractor = addanalysis!(G, ExtractionAnalysis, astsize)\nex = extract!(G, extractor)\nex == :(log(a) * 5)","category":"page"},{"location":"analysis/#Complex-Example","page":"EGraph Analyses and Extraction","title":"Complex Example","text":"","category":"section"},{"location":"analysis/","page":"EGraph Analyses and Extraction","title":"EGraph Analyses and Extraction","text":"Let's see a more complex example: extracting the smallest equivalent expression, from a trivial mathematics theory","category":"page"},{"location":"analysis/","page":"EGraph Analyses and Extraction","title":"EGraph Analyses and Extraction","text":"distrib = @theory begin\n\ta * (b + c) => (a * b) + (a * c)\n\t(a * b) + (a * c) => a * (b + c)\nend\npowers = @theory begin\n\ta * a => a^2\n\ta => a^1\n\ta^n * a^m => a^(n+m)\nend\nlogids = @theory begin\n\tlog(a^n) => n * log(a)\n\tlog(x * y) => log(x) + log(y)\n\tlog(1) => 0\n\tlog(:e) => 1\n\t:e^(log(x)) => x\nend\nfold_add = @theory begin\n\ta::Number + b::Number |> a + b\nend\nt = comm_monoid âˆª comm_group âˆª distrib âˆª powers âˆª logids âˆª fold_mul âˆª fold_add","category":"page"},{"location":"egraphs/#EGraphs-and-Equality-Saturation","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"","category":"section"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"An EGraph is an efficient data structure for representing congruence relations. Over the past decade, several projects have repurposed EGraphs to implement state-of-the-art, rewrite-driven compiler optimizations and program synthesizers using a technique known as equality saturation. Metatheory.jl provides a general purpose, customizable implementation of EGraphs and equality saturation, inspired from the egg library for Rust. You can read more about the design of the EGraph data structure and equality saturation algorithm in the egg paper.","category":"page"},{"location":"egraphs/#What-can-I-do-with-EGraphs-in-Metatheory.jl?","page":"EGraphs and Equality Saturation","title":"What can I do with EGraphs in Metatheory.jl?","text":"","category":"section"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"Most importantly, the EGraph backend for Metatheory.jl allows you to create an EGraph from a starting expression, to add more expressions to the EGraph with addexpr!, and then to effectively fill the EGraph with all possible equivalent expressions resulting from applying rewrite rules from a theory, by using the saturate! function. You can then easily extract expressions with a cost function and an ExtractionAnalysis.","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"A killer feature of egg and Metatheory.jl are EGraph Analyses. They allow you to annotate expressions and equivalence classes in an EGraph with values from a semilattice domain, and then to:","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"Extract expressions from an EGraph basing from analysis data.\nHave conditional rules that are executed if some criteria is met on analysis data\nHave dynamic rules that compute the right hand side based on analysis data.","category":"page"},{"location":"egraphs/#Theories-and-Algebraic-Structures","page":"EGraphs and Equality Saturation","title":"Theories and Algebraic Structures","text":"","category":"section"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"The e-graphs backend can directly handle associativity, commutativity and distributivity, rules that are otherwise known of causing loops in symbolic computations.","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"comm_monoid = @theory begin\n    a * b => b * a\n    a * 1 => a\n    a * (b * c) => (a * b) * c\nend","category":"page"},{"location":"egraphs/#Equality-Saturation","page":"EGraphs and Equality Saturation","title":"Equality Saturation","text":"","category":"section"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"We can programmatically build and saturate an EGraph. The function saturate! takes an EGraph and a theory, and executes equality saturation. Returns a report of the equality saturation process. saturate! is configurable, customizable parameters include a timeout on the number of iterations, a sizeout on the number of e-classes in the EGraph, a stopwhen functions that stops saturation when it evaluates to true.","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"G = EGraph(:((a * b) * (1 * (b + c))));\nreport = saturate!(G, t);\n# access the saturated EGraph\nreport.egraph\n\n# show some fancy stats\nprintln(report);\n","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"With the EGraph equality saturation backend, Metatheory.jl can prove simple equalities very efficiently. The @areequal macro takes a theory and some expressions and returns true iff the expressions are equal according to the theory. The following example returns true.","category":"page"},{"location":"egraphs/","page":"EGraphs and Equality Saturation","title":"EGraphs and Equality Saturation","text":"@areequal t (x+y)*(a+b) ((a*(x+y))+b*(x+y)) ((x*(a+b))+y*(a+b))","category":"page"},{"location":"classic/#Classical-Rewriting","page":"Classical Rewriting","title":"Classical Rewriting","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"There are some use cases where EGraphs and equality saturation are not required. The classical rewriting backend is suited for simple tasks when computing the whole equivalence class is overkill.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"The classical rewriting backend can be accessed with the rewrite function, which uses a recursive fixed point iteration algorithm to rewrite a source expression. The expression can be traversed with a depth first (inner left expression) evaluation order, or with a breadth first (outer left expression) evaluation order. You can configure the evaluation order by passing the keyword argument order=:inner (default) or order=:outer to the rewrite function.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Note: With the classical rewrite algorithm, rules are matched in order and applied deterministically: every iteration, only the first rule that matches is applied. This means that when using the classical rewriting backend, the ordering of rules in a theory matters!. If some rules produce a loop, which is common for regular algebraic rules such as commutativity, distributivity and associativity, the other following rules in the theory will never be applied.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"The classical rewrite algorithm is suitable for:","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Simple Pattern Matching Tasks\nInterpretation of Code (e.g. interpretation of an eDSL)\nNon-Optimizing Compiler Steps and Transformations (e.g. Your eDSL â€“> Julia)\nSimple Deterministic Manipulation Tasks (e.g. cleaning expressions)","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"For algebraic, mathematics oriented rewriting, please use the EGraph backend.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Rewriting loops are detected by keeping an history of hashes of the rewritten expression. When a loop is detected, rewriting stops immediately and returns the current expression.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Metatheory.jl is meant for composability: you can always compose and interleave rewriting steps that use the classical rewriting backend or the more advanced EGraph backend.","category":"page"},{"location":"classic/#Example","page":"Classical Rewriting","title":"Example","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Let's simplify an expression in the comm_monoid theory by using the EGraph backend. After simplification, we may want to move all the Ïƒ symbols to the right of multiplications, we can do this simple task with a classical rewriting step, by using the rewrite function.","category":"page"},{"location":"classic/#Step-1:-Simplification-with-EGraphs","page":"Classical Rewriting","title":"Step 1: Simplification with EGraphs","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"using Metatheory\nusing Metatheory.EGraphs\nusing Metatheory.Library\n\ncomm_monoid = commutative_monoid(:(*), 1);\nstart_expr = :( (a * (1 * (2Ïƒ)) * (b * Ïƒ + (c * 1)) ) );\ng = EGraph(start_expr);\nextractor = addanalysis!(g, ExtractionAnalysis, astsize);\nsaturate!(g, comm_monoid);\nsimplified = extract!(g, extractor)\n\n# output\n:(a * (Ïƒ * 2) * (Ïƒ * b + c))\n","category":"page"},{"location":"classic/#Step-2:-Moving-Ïƒ-to-the-right","page":"Classical Rewriting","title":"Step 2: Moving Ïƒ to the right","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"moveright = @theory begin\n\t:Ïƒ * a \t\t\t\t=> a*:Ïƒ\n\t(a * :Ïƒ) * b \t=> (a * b) * :Ïƒ\n\t(:Ïƒ * a) * b \t=> (a * b) * :Ïƒ\nend;\n\nsimplified = rewrite(simplified, moveright);\n\n# output\n:((a * (2 * :Ïƒ)) * (b * :Ïƒ + c))","category":"page"},{"location":"classic/#Assignment-to-variables-during-rewriting.","page":"Classical Rewriting","title":"Assignment to variables during rewriting.","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Using the classical rewriting backend, you may want to assign a value to an externally defined variable. Because of the nature of modules and the RuntimeGeneratedFunction compilation pipeline, it is not possible to assign values to variables in other modules. You can achieve such behaviour by using Julia References (docs), which behave similarly to pointers in other languages such as C or OCaml.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Note: due to nondeterminism, it is unrecommended to assign values to Refs when using the EGraph backend!","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"safe_var = 0\nref_var = Ref{Real}(0)\n\nreft = @theory begin\n\t:safe |> (safe_var = Ï€)\n\t:ref |> (ref_var[] = Ï€)\nend\n\nrewrite(:(safe), reft; order=:inner, m=@__MODULE__)\nrewrite(:(ref), reft; order=:inner, m=@__MODULE__)\n\nsafe_var == 0\nref_var[] == Ï€","category":"page"},{"location":"classic/#A-Tiny-Imperative-Programming-Language-Interpreter","page":"Classical Rewriting","title":"A Tiny Imperative Programming Language Interpreter","text":"","category":"section"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"Here is an example showing interpretation of a very tiny, turing complete subset of the Julia programming language. To achieve turing completeness in an imperative paradigm language, just integer+boolean arithmetic and if and while statements are needed. Since a recursive algorithm is sufficient for interpreting those expressions, this example does not use the e-graphs backend! Note how we are representing semantics for a different programming language by reusing the Julia AST data structure, and therefore efficiently reusing the Julia parser for our new toy language.","category":"page"},{"location":"classic/","page":"Classical Rewriting","title":"Classical Rewriting","text":"See this test file.","category":"page"},{"location":"#Metatheory.jl","page":"Metatheory.jl","title":"Metatheory.jl","text":"","category":"section"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"<p align=\"center\">\n<img width=\"400px\" src=\"https://raw.githubusercontent.com/0x0f0f0f/Metatheory.jl/master/docs/src/assets/dragon.jpg\"/>\n</p>","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"Metatheory.jl is a general purpose metaprogramming and algebraic computation library for the Julia programming language, designed to take advantage of the powerful reflection capabilities to bridge the gap between symbolic mathematics, abstract interpretation, equational reasoning, optimization, composable compiler transforms, and advanced homoiconic pattern matching features.","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"Read the preprint on arXiv.","category":"page"},{"location":"#Installation","page":"Metatheory.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"You can install the stable version:","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"julia> using Pkg; Pkg.add(\"Metatheory\")","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"Or you can install the developer version (recommended by now for latest bugfixes)","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"julia> using Pkg; Pkg.add(url=\"https://github.com/0x0f0f0f/Metatheory.jl\")","category":"page"},{"location":"#Usage","page":"Metatheory.jl","title":"Usage","text":"","category":"section"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"Since Metatheory.jl relies on RuntimeGeneratedFunctions.jl, you have to call @metatheory_init in the module where you are going to use Metatheory.","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"using Metatheory\nusing Metatheory.EGraphs\n\n@metatheory_init","category":"page"},{"location":"#Citing","page":"Metatheory.jl","title":"Citing","text":"","category":"section"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"If you use Metatheory.jl in your research, please cite our works.","category":"page"},{"location":"","page":"Metatheory.jl","title":"Metatheory.jl","text":"@misc{cheli2021metatheoryjl,\n      title={Metatheory.jl: Fast and Elegant Algebraic Computation in Julia with Extensible Equality Saturation},\n      author={Alessandro Cheli},\n      year={2021},\n      eprint={2102.07888},\n      archivePrefix={arXiv},\n      primaryClass={cs.PL}\n}","category":"page"}]
}
